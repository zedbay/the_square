'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _serverAddress = require('../server-address');

var _serverAddress2 = _interopRequireDefault(_serverAddress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function resolveToSelf(address) {
  return _promise2.default.resolve([address]);
} /**
   * Copyright (c) 2002-2019 "Neo4j,"
   * Neo4j Sweden AB [http://neo4j.com]
   *
   * This file is part of Neo4j.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

var ConfiguredCustomResolver = function () {
  function ConfiguredCustomResolver(resolverFunction) {
    (0, _classCallCheck3.default)(this, ConfiguredCustomResolver);

    this._resolverFunction = resolverFunction ? resolverFunction : resolveToSelf;
  }

  (0, _createClass3.default)(ConfiguredCustomResolver, [{
    key: 'resolve',
    value: function resolve(seedRouter) {
      var _this = this;

      return new _promise2.default(function (resolve) {
        return resolve(_this._resolverFunction(seedRouter.asHostPort()));
      }).then(function (resolved) {
        if (!Array.isArray(resolved)) {
          throw new TypeError('Configured resolver function should either return an array of addresses or a Promise resolved with an array of addresses.' + ('Each address is \'<host>:<port>\'. Got: ' + resolved));
        }
        return resolved.map(function (r) {
          return _serverAddress2.default.fromUrl(r);
        });
      });
    }
  }]);
  return ConfiguredCustomResolver;
}();

exports.default = ConfiguredCustomResolver;